import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import random
import os
import joblib


class StackingEnsembleModel:
    def __init__(self, train_path='run/train_nr.csv'):
        """
        初始化模型，加载数据
        """
        self.train_path = train_path
        self.base_models = [
            ('rf', RandomForestClassifier(random_state=42)),
            ('svm', SVC(probability=True, random_state=42)),
            ('knn', KNeighborsClassifier()),
            ('lr', LogisticRegression(random_state=42)),
            ('xgb', XGBClassifier(random_state=42))
        ]
        self.meta_model = None

    def set_seed(self, seed=42):
        """
        固定随机种子，确保结果可复现
        """
        random.seed(seed)
        np.random.seed(seed)
        tf.random.set_seed(seed)
        os.environ['PYTHONHASHSEED'] = str(seed)
        os.environ['TF_DETERMINISTIC_OPS'] = '1'
        os.environ['TF_CUDNN_DETERMINISTIC'] = '1'

    def load_data(self):
        """
        加载训练数据
        """
        # 加载训练数据
        train_data = pd.read_csv(self.train_path)
        train_data.set_index(train_data.columns[0], inplace=True)
        self.train_labels = train_data['label']
        self.train_data = np.array(train_data.iloc[:, 1:].values.tolist())


    def split_data(self, test_size=0.2, random_state=42):
        """
        切分训练集和验证集
        """
        self.X_train, self.X_val, self.y_train, self.y_val = train_test_split(
            self.train_data, self.train_labels, test_size=test_size, random_state=random_state
        )



# 训练模型
if __name__ == "__main__":
    model = StackingEnsembleModel()
    model.run(seed=42)
